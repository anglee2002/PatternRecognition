%----------------------- 本程序为第四章感知器算法的示例代码 -----------------------%
close all;
clear all;
clc;

% 训练样本来自两类：正类和负类，每类有两个样本，共有四个训练样本
X=[0,0; 0,-1; 1,0; 1,1]; % 四个训练样本，每行为一个样本，每个样本为一个二维向量（即每个样本有两个属性）
classes=[1, 1, -1, -1]; % 训练样本的类别，1表示正类，2表示负类

w0=[0, 0, 0]; % 感知器的增广权向量的初始值
c=1; % 修正系数

[w, k] = PA(X, w0, c, classes); % 调用执行感知器算法的PA子函数，w为最终的增广权向量， k为w的迭代更新次数

syms x1 x2; % 定义符号变量x1和x2（分别表示样本的第一个和第二个属性），用于线性判别函数的表示
d=w(1)*x1+w(2)*x2+w(3); % 线性判别函数的表示


% 画出四个训练样本的分布图以及决策面，在画决策面时采用的方法为令线性判别函数等于0，找出x1和x2的关系（固定其中一个属性，将另一个属性用固定属性表示）
figure(1),
plot(X(:,1),X(:,2),'r*' ) ; axis([-0.5 1.5 -1.5 1.5]); hold on  % 画出四个训练样本的分布图
x2=-1.5: 0.1: 1.5; % 固定属性x2
x1=(-w(2)*x2-w(3))/w(1); % 令d=0，用x2和w来表示x1
plot(x1,x2, '-b'); % 画出决策面

% 输出w的值和w的迭代更新次数
fprintf('w的值为w(1)=%4.2f, w(2)=%4.2f, w(3)=%4.2f\n',w(1),w(2),w(3));
fprintf('w的迭代更新次数为%d\n',k);


